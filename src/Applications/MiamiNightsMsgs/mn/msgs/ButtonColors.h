/**
 * @file
 *
 * Header for the mn::msgs::ButtonColors struct.
 *
 * THIS FILE IS AUTOMATICALLY GENERATED BY THE IDL COMPILER FROM
 * IDL SOURCE FILE "mn_msgs.bbidl"
 */

#ifndef __mn_msgs_ButtonColors_H__
#define __mn_msgs_ButtonColors_H__

#include <bbox/enc/FromBinary.h>
#include <bbox/enc/FromTextFormat.h>
#include <bbox/enc/MsgTypeLibrary.h>
#include <bbox/enc/ToBinary.h>
#include <bbox/enc/ToTextFormat.h>

namespace mn {
namespace msgs {

class ButtonColors
{
public:
    ButtonColors() = default;
    ~ButtonColors() = default;
    ButtonColors(const ButtonColors&) = default;
    ButtonColors(ButtonColors&&) = default;
    ButtonColors &operator =(const ButtonColors&) = default;
    ButtonColors &operator =(ButtonColors&&) = default;

    void ToBinary(bbox::enc::ToBinary &m) const;
    void FromBinary(bbox::enc::FromBinary &m);
    void ToTextFormat(bbox::enc::ToTextFormat &m) const;
    void FromTextFormat(bbox::enc::FromTextFormat &m);

    bool operator ==(const ButtonColors &other) const
    {
        return (back_color == other.back_color)
            && (play_color == other.play_color)
            && (wash_color == other.wash_color)
            && (button_colors == other.button_colors);
    }

    bool operator !=(const ButtonColors &other) const
    {
        return (back_color != other.back_color)
            || (play_color != other.play_color)
            || (wash_color != other.wash_color)
            || (button_colors != other.button_colors);
    }

    std::string back_color;
    std::string play_color;
    std::string wash_color;
    std::vector<std::string> button_colors;

    static bbox::enc::MsgTypeLibrary::Registration<ButtonColors> g_msg_registration;
};

} // namespace msgs
} // namespace mn

#endif // __mn_msgs_ButtonColors_H__
