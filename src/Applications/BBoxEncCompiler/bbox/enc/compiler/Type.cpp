/**
 * @file
 *
 * Implementation file for the bbox::enc::compiler::Type class.
 */

#include <bbox/enc/compiler/Type.h>

namespace bbox {
namespace enc {
namespace compiler {

Type::Type(const Namespace::ptr &ns_ptr, const Token &name)
	: m_ns(ns_ptr)
	, m_name(name)
{
}

Type::~Type()
{
}

void Type::GenerateCppHeaderGuard(std::stringstream &stream) const
{
	stream << "__";

	for (const Token &token : m_ns->GetName().GetTokens())
		stream << token.GetContents() << "_";
	
	stream << m_name.GetContents();

	stream << "_H__";
}

void Type::GenerateCppHeaderHeader(std::stringstream &stream, const char *type) const
{
	stream << "/**" << std::endl;
	stream << " * @file" << std::endl;
	stream << " *" << std::endl;
	stream << " * Header for the " << m_ns->GetName().ToString() << "::" << m_name.GetContents() << ' ' << type << '.' << std::endl;
	stream << " *" << std::endl;
	stream << " * THIS FILE IS AUTOMATICALLY GENERATED BY THE IDL COMPILER FROM" << std::endl;
	stream << " * IDL SOURCE FILE \"" << m_name.GetFile()->GetName() << '\"' << std::endl;
	stream << " */" << std::endl;
	stream << std::endl;
	stream << "#ifndef ";
	GenerateCppHeaderGuard(stream);
	stream << std::endl;
	stream << "#define ";
	GenerateCppHeaderGuard(stream);
	stream << std::endl;
	stream << std::endl;
	stream << "#include <bbox/enc/FromBinary.h>" << std::endl;
	stream << "#include <bbox/enc/FromTextFormat.h>" << std::endl;
	stream << "#include <bbox/enc/ToBinary.h>" << std::endl;
	stream << "#include <bbox/enc/ToTextFormat.h>" << std::endl;
	stream << std::endl;
}

void Type::GenerateCppHeaderFooter(std::stringstream &stream) const
{
	stream << "#endif // ";
	GenerateCppHeaderGuard(stream);
	stream << std::endl;
}

void Type::GenerateCppSourceHeader(std::stringstream &stream, const char *type) const
{
	stream << "/**" << std::endl;
	stream << " * @file" << std::endl;
	stream << " *" << std::endl;
	stream << " * Source for the " << m_ns->GetName().ToString() << "::" << m_name.GetContents() << ' ' << type << '.' << std::endl;
	stream << " *" << std::endl;
	stream << " * THIS FILE IS AUTOMATICALLY GENERATED BY THE IDL COMPILER FROM" << std::endl;
	stream << " * IDL SOURCE FILE \"" << m_name.GetFile()->GetName() << '\"' << std::endl;
	stream << " */" << std::endl;
	stream << std::endl;
}

void Type::GenerateCppNamespaceOpen(std::stringstream &stream) const
{
	for (const Token &tok : m_ns->GetName().GetTokens())
	{
		stream << "namespace " << tok.GetContents() << " {" << std::endl;
	}
	stream << std::endl;
}

void Type::GenerateCppNamespaceClose(std::stringstream &stream) const
{
	const auto &tokens{ m_ns->GetName().GetTokens() };

	for (auto it = tokens.rbegin(); it != tokens.rend(); ++it)
	{
		stream << "} // namespace " << it->GetContents() << std::endl;
	}
	stream << std::endl;
}

} // namespace bbox::enc::compiler
} // namespace bbox::enc
} // namespace bbox
