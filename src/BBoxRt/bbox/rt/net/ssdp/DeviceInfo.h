/**
 * @file
 *
 * Header for the bbox::rt::net::ssdp::DeviceInfo struct.
 *
 * THIS FILE IS AUTOMATICALLY GENERATED BY THE IDL COMPILER FROM
 * IDL SOURCE FILE "bbox_rt_net_ssdp.bbidl"
 */

#ifndef __bbox_rt_net_ssdp_DeviceInfo_H__
#define __bbox_rt_net_ssdp_DeviceInfo_H__

#include <bbox/enc/FromBinary.h>
#include <bbox/enc/FromTextFormat.h>
#include <bbox/enc/MsgTypeLibrary.h>
#include <bbox/enc/ToBinary.h>
#include <bbox/enc/ToTextFormat.h>

#include <bbox/rt/net/IpAddress.h>

namespace bbox {
namespace rt {
namespace net {
namespace ssdp {

class DeviceInfo
{
public:
    DeviceInfo() = default;
    ~DeviceInfo() = default;
    DeviceInfo(const DeviceInfo&) = default;
    DeviceInfo(DeviceInfo&&) = default;
    DeviceInfo &operator =(const DeviceInfo&) = default;
    DeviceInfo &operator =(DeviceInfo&&) = default;

    void ToBinary(bbox::enc::ToBinary &m) const;
    void FromBinary(bbox::enc::FromBinary &m);
    void ToTextFormat(bbox::enc::ToTextFormat &m) const;
    void FromTextFormat(bbox::enc::FromTextFormat &m);

    bool operator ==(const DeviceInfo &other) const
    {
        return (usn == other.usn)
            && (local_address == other.local_address)
            && (device_address == other.device_address)
            && (service_type == other.service_type)
            && (location == other.location);
    }

    bool operator !=(const DeviceInfo &other) const
    {
        return (usn != other.usn)
            || (local_address != other.local_address)
            || (device_address != other.device_address)
            || (service_type != other.service_type)
            || (location != other.location);
    }

    std::string usn;
    IpAddress local_address;
    IpAddress device_address;
    std::string service_type;
    std::string location;
};

} // namespace ssdp
} // namespace net
} // namespace rt
} // namespace bbox

#endif // __bbox_rt_net_ssdp_DeviceInfo_H__
