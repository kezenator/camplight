/**
 * @file
 *
 * Header for the bbox::rt::net::AdapterInfo struct.
 *
 * THIS FILE IS AUTOMATICALLY GENERATED BY THE IDL COMPILER FROM
 * IDL SOURCE FILE "bbox_rt_net.bbidl"
 */

#ifndef __bbox_rt_net_AdapterInfo_H__
#define __bbox_rt_net_AdapterInfo_H__

#include <bbox/enc/FromBinary.h>
#include <bbox/enc/FromTextFormat.h>
#include <bbox/enc/MsgTypeLibrary.h>
#include <bbox/enc/ToBinary.h>
#include <bbox/enc/ToTextFormat.h>

#include <bbox/rt/net/AdapterAddressInfo.h>

namespace bbox {
namespace rt {
namespace net {

class AdapterInfo
{
public:
    AdapterInfo() = default;
    ~AdapterInfo() = default;
    AdapterInfo(const AdapterInfo&) = default;
    AdapterInfo(AdapterInfo&&) = default;
    AdapterInfo &operator =(const AdapterInfo&) = default;
    AdapterInfo &operator =(AdapterInfo&&) = default;

    void ToBinary(bbox::enc::ToBinary &m) const;
    void FromBinary(bbox::enc::FromBinary &m);
    void ToTextFormat(bbox::enc::ToTextFormat &m) const;
    void FromTextFormat(bbox::enc::FromTextFormat &m);

    bool operator ==(const AdapterInfo &other) const
    {
        return (system_name == other.system_name)
            && (user_name == other.user_name)
            && (description == other.description)
            && (mac_address == other.mac_address)
            && (ip_addresses == other.ip_addresses);
    }

    bool operator !=(const AdapterInfo &other) const
    {
        return (system_name != other.system_name)
            || (user_name != other.user_name)
            || (description != other.description)
            || (mac_address != other.mac_address)
            || (ip_addresses != other.ip_addresses);
    }

    std::string system_name;
    std::string user_name;
    std::string description;
    std::string mac_address;
    std::vector<AdapterAddressInfo> ip_addresses;
};

} // namespace net
} // namespace rt
} // namespace bbox

#endif // __bbox_rt_net_AdapterInfo_H__
